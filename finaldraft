from GF2 import one
class Vec:
    def __init__(self,labels,function):
        self.D = labels
        self.f = function

# sparse should be a set of tuples
def lightsOut(gridsize,sparse):
    numpool=list(range(gridsize))
    pointpool={(X,Y) for X in numpool for Y in numpool}
    initial = Vec(pointpool,{X:one for X in sparse})
    possiblePress = subsets(gridsize)
    print(possiblePress)
    for x in possiblePress:
    vecCombiner(initial,possiblePress)


def vecCombiner(initial,possiblePress):
    #output={initial.f==possiblePress.f}
    #solutionDisplacement1={(X[0]-1,X[1]) for X in possiblePress.f}
    #solutionDisplacement2={(X[0]+1,X[1]) for X in possiblePress.f}
    #solutionDisplacement3={(X[0],X[1]-1) for X in possiblePress.f}
    #solutionDisplacement4={(X[0],X[1]+1) for X in possiblePress.f}
    #if finalVec.f == {}:
    #    return(True)
    #else:
    #    return(False)

def subsets(i):
    if i == 0:
        return[()]
    else:
        return induct(subsets(i-1),i)

def induct(listoflists,n):
    x=listoflists[:]
    s={X+[n] for X in listoflists}
    return (s,x)
