#Contract induct(s) : set of sets, integer -> set of sets
#Purpose induct : to take a set of sets and create a new set of sets that contains the original in addition to
#Example induct({{}},5) -> {{},{5}}, induct({{2},{3}}, 4) -> {{2},{3},{2,4},{3,4}}
def subsets(i):
    if i == 0:
        return[[]]
    else:
        return induct(subsets(i-1),i)

def induct(listoflists,n):
    v=listoflists
    #added variable v to fix listoflists changing value midway through function (suspected leak from myappend)
    s=[myappend(X,n) for X in listoflists]
    return s+v

def myappend(list,value):
    p=list
    p.append(value)
    return p

///


from GF2 import one
class Vec:
    def __init__(self,labels,function):
        self.D = labels
        self.f = function
def lightsOut(gridsize,sparse):
    numpool=set(range(0,gridsize,1))
    pointpool={(X,Y) for X in numpool for Y in numpool}
    initial = Vec(pointpool,{X:one for X in sparse})

    vecCombiner(initial,possiblePress)
    return Vec(initial.D,{d:getitem(initial,d)+getitem(possiblePress,d) for d in initial.D})

def vecCombiner(initial,possiblePress):

    if finalVec.f == {}:
        return(True)
    else:
        return(False)

/////




from GF2 import one
class Vec:
    def __init__(self,labels,function):
        self.D = labels
        self.f = function

def lightsOut(gridsize,sparse):
    numpool=list(range(gridsize))
    pointpool=[(X,Y) for X in numpool for Y in numpool]
    initial = Vec(pointpool,{X:one for X in sparse})
    possiblePress = possiblePresses(gridsize)
    buttonPresser(initial,possiblePress)

def subsets(i):
    if i == 0:
        return[[]]
    else:
        return induct(subsets(i-1),i)

def induct(listoflists,n):
    return listoflists + [X+[n] for X in listoflists]

def possiblePresses(gridsize):
    numberOfButtons = gridsize**2
    subs = subsets(numberOfButtons)
    f={y:[x for x in subs] for y in list(range(1,numberOfButtons+1))}
    if gridsize == 2:
        z={1:(0,0),2:(0,1),3:(1,0),4:(1,1)}
        print(subs)
        {}

def buttonPresser(initial, press):
    buttonToVector(press, initial.D)
    finalvec = addVector(initial,buttonToVector(press))

def addVector(a, b):
    return Vec(a.D,{d:getitem(a,d)+getitem(b,d) for d in a.D})

def buttonToVector(button, domain):
    switchedSet = pressAffect(button, domain)
    return Vec(domain,{X:one for X in switchedSet})

def pressAffect(button, domain):
    x1 = ((button[0]-1), button[1])
    x2 = ((button[0]+1), button[1])
    y1 = (button[0], (button[1]-1))
    y2 = (button[0], (button[1]+1))
    affected = [x1, x2, y1, y2]
    affected2 = []
    for x in affected:
        if x in domain:
            affected2.append(x)
    return affected2



def lightsOut(gridsize,sparse):
    initialstate(gridsize,sparse)
    possiblePress = possiblePresses(gridsize)
    buttonPresser(initial,possiblePress)



#append methods
def myappend(list,value):
    p=list
    p.append(value)
    return p

def addappend(list,value):
    final=[X+[value] for X in list]
    return final
