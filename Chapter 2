from plotting import plot
L = [[2, 2], [3, 2], [1.75, 1], [2, 1], [2.25, 1], [2.5, 1], [2.75,
  1], [3, 1], [3.25, 1]]
plot(L, 4)
def northEast(v,w):
    return [v[0]+w[0], v[1]+w[1]]

use [4,4] and [-4,-4] for v and [1,2] for w

plot([add2(v, [1,2]) for v in L], 4)


def addVector(v, w):
    return([x+y for (x,y) in zip(v,w)])

def vectorScalar(alpha, v):
    return [alpha*v[i] for i in list(range(len(v)))]

plot(vectorScalar(0.5,L), 4)

[2,4] [4,4]

# Contract lineSegment : two vec and one int -> a list of vec
# Purpose to create points between the two input vectors, the number of which is determined by the input int
# Example lineSegment([2,4], [4,5], 3) : [[2,4], [2,4.25], [3, 4.5], [3.5, 4.75], [4,5]]
def lineSegment(A, B, C):
    E=subVector(A, B)
    F=vectorScalar(C, E)
    return(F)
    plot(points, 20)

def subVector(v, w):
    return([x+y for (x,y) in zip(v,w)])

def vectorScalar(alpha, v):
    return [alpha*v[i] for i in list(range(len(v)))]
